pipeline {
    agent any

    environment {
        S3_BUCKET = 'my-s3-bucket-for-jenkins-pipeline-setup'
        S3_KEY = 'my-app.zip'
        ENVIRONMENT_NAME = 'Test-env-env-en'
        APPLICATION_NAME = 'test-env'
        AWS_REGION = 'us-east-1'
        SECRET_NAME = 'secret-jenkins-access'  // Replace with your actual secret name
        VERSION_LABEL = "app-version-${BUILD_NUMBER}"
    }

    stages {
        stage('Retrieve AWS Credentials from Secrets Manager') {
            steps {
                script {
                    // Retrieve the secret as plain text (JSON object)
                    def secretValue = sh(script: "aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query 'SecretString' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    
                    // Parse the JSON to get the key-value pair
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def credentials = jsonSlurper.parseText(secretValue)

                    // Extract the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
                    env.AWS_ACCESS_KEY_ID = credentials.keySet().iterator().next()  // The key (AWS_ACCESS_KEY_ID)
                    env.AWS_SECRET_ACCESS_KEY = credentials[env.AWS_ACCESS_KEY_ID]  // The value (AWS_SECRET_ACCESS_KEY)
                }
            }
        }

        stage('Checkout') {
            steps {
                git url: 'https://github.com/ManojKamatam/Beanstalk_Deployments_maintainingVersions-SecretManager.git', branch: 'main'
            }
        }
        
        stage('Upload to S3') {
            steps {
                sh "aws s3 cp application.zip s3://${S3_BUCKET}/${S3_KEY} --region ${AWS_REGION}"
            }
        }

        stage('Create Application Version') {
            steps {
                sh """
                    aws elasticbeanstalk create-application-version \
                    --application-name ${APPLICATION_NAME} \
                    --version-label ${VERSION_LABEL} \
                    --source-bundle S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} \
                    --region ${AWS_REGION}
                """
            }
        }

        stage('Update Elastic Beanstalk Environment') {
            steps {
                sh """
                    aws elasticbeanstalk update-environment \
                      --application-name ${APPLICATION_NAME} \
                      --environment-name ${ENVIRONMENT_NAME} \
                      --version-label ${VERSION_LABEL} \
                      --region ${AWS_REGION}
                """
            }
        }
    }

    post {
        success {
            echo 'Deployment process completed successfully.'
        }
        failure {
            echo 'Deployment process failed. Please check the logs for more details.'
        }
    }
}
